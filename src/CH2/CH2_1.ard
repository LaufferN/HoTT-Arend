\import CH1.Def.def

-- Chapter 2. Homotopy Type Theory
-- in this chapter we are goinig to see what kind of structures do the identity types have, given its inductor.
-- We are going to see that path induction gives types in intensional Type Theory the structure of infinity groupoids,
-- or (infty, 0) categories.

-- Note that Arend uses the identity type via the interval type, and all the properties of the identity type, as well
-- as function extensionality, can be derived from the existence of the interval type, but following the book,
-- we are going to explore the structures of identity type from the inductor.

-- we recall the definition of inductor of the identity type:

\func indPath {A : \Type} (C : \Pi (x y : A) -> (x = y) -> \Type) (c : \Pi(x : A) -> (C x x (refl(A)(x)))) (x y : A) (p : x = y) : C(x)(y)(p)
\elim p
  | idp  => c(x)

\func indPath' {A : \Type} (C : \Pi (x y : A) -> (x = y) -> \Type) (c : \Pi(x : A) -> (C x x (refl(A)(x)))) (x y : A) (p : x = y) : C(x)(y)(p)
=> \case  y, p \with {
| x , idp => c(x)}

-- idp is how we denote the reflexivity element of x = x.


-- 2.1 Types of higher groupoids

-- we are going to show that equality is symmetric, or homotopically, every path has an inverse path, with inv idp :== idp:

\func inv {A : \Type} {x  y : A} : (x = y) -> (y = x)
  => \lam p => indPath {A} (\lam x y p => (y = x)) (\lam x => idp) x y p

\func inv' {A : \Type} {x  y : A} (p : x = y) : (y = x) \elim y, p
  | x, idp => idp


-- transitivity of equality, or that path concatenates, again we have idp * idp :== idp:

\func \infix 3 * {A : \Type} {x y z : A} (p : x = y) (q : y = z) : (x = z) \elim p, q
  | idp, idp => idp

-- note that we did a double induction. In truth, I could have just used identity map for helper,
-- but in order to keep the concatenation symmetric on the paths, I used the path induction on the helper.

\func \infix 3 *af {A : \Type} {x y z : A} (p : x = y) (q : y = z) :  (x = z) \elim y , p
  | x , idp => \elim x , q
  | z , idp => idp


\func \infix 3 *af' {A : \Type} {x y z : A} (p : x = y) (q : y = z) :  (x = z) =>
  \case y , p \as y', p' \return x = z \with {
    | x , idp => q

  }

-- I don't know how to do it via inductor.
\func \infix 3 ab {A : \Type} (x y z : A) : (x = y) -> (y = z) -> (x = z)
  => \lam p q => indPath {A} (\lam x y p => (y = z) -> (x = z))
                         (\lam x q => q) x y p q
-- indPath(\lam x z q => x = z) (\lam x => idp) x z q) x y p z q


-- now we can show some trivial relations of inverse path, concatenation...

\func idp_left_unit {A : \Type} {x y : A} {p : x = y} : p = p * idp \elim y, p
  | x, idp => idp

\func idp_right_unit {A : \Type} {x y : A} {p : x = y} : p = idp * p \elim y , p
  | x, idp => idp

-- this shows that reflexivity idp is the unit object with respect to concatenation.



\func inv_right_inverse {A : \Type} {x y : A} {p : x = y} : (inv p) * p = idp \elim y , p
  | x , idp => idp

\func inv_left_inverse {A : \Type} {x y : A} {p : x = y} : p * inv p = idp \elim y , p
  | x , idp => idp

-- this shows that inverse path is infact the inverse.

\func inv_is_involutive {A : \Type} (x y : A) (p : x = y) : inv (inv p) = p \elim y , p
  | x , idp => idp

-- lastly, we are going to show that concatenation is "homotopically" associative:

\func *_assoc {A : \Type} {x y z w : A} (p : x = y) (q : y = z) (r : z = w) :
  p * (q * r) = (p * q) * r \elim p , q , r
  | idp, idp, idp => idp

{-- note now that we have associativity, there are two ways to go from
p * (q * (r * s)) to (p * q) * r) * s, and one can ask how these two equalities are the same.
-}

-- with that in mind, we are going to define the most important case of identity types:

\func Loop {A : \Type} (a : A) : \Type => a = a

-- note that Loop {A} (a) is canonically pointed, with the reflexivity ipd {A} {a} inhabiting it,
-- now we can ask for the double loop space:

\func Loop^2 {A : \Type} (a : A) : \Type => idp {A} {a} = idp {A} {a}

-- now we are going to proof the famous Eckmann-Hilton principle, which says that the double loops space
-- has concatenation commutative (E^2 commutative):

{-\func EckHil {A : \Type} {a : A} {alpha beta : Loop^2 {A} (a)} : alpha * beta = beta * alpha
  => {?} -}

-- first we have to define how the composition of 1 loops gives an operation on double loop, and for
-- more general identity types:

\func star {A : \Type} {a b c : A} {p q : a = b} {r s : b = c} (alpha : p = q) (beta : r = s) : p * r = q * s
  => (leftstar r alpha) * (rightstar q beta)

\func leftstar {A : \Type} {a b c : A} {p q : a = b} (r : b = c) (alpha : p = q) : p * r = q * r \elim r
  | idp =>  ((inv {a = b} {p} {p * idp} (idp_left_unit {A} {a} {b} {p})) * alpha) * idp_left_unit {A} {a} {b} {q}

\func leftstar* {A : \Type} {a b c : A} {p q : a = b} (r : b = c) (alpha : p = q) : p * r = q * r \elim r
  | idp =>  ((inv (idp_left_unit)) * alpha) * idp_left_unit

\func rightstar {A : \Type} {a b c : A} (q : a = b) {r s : b = c} (beta : r = s) : q * r = q * s \elim q
  | idp => ((inv (idp_right_unit)) * beta) * idp_right_unit

-- \func star {A : \Type} {a b c : A} (p q : a = b) (r s : b = c) (alpha : p = q) (beta : r = s) : p * r = q * s
--  => (leftstar r alpha) * (rightstar q beta)

-- now let's define the star operation on second loop space:

\func \infix 4 Star {A : \Type} {a : A} (alpha beta : Loop^2 {A} (a)) : Loop^2 {A} (a)
  => star alpha beta

-- now we will prove that alpha Start beta = alpha * beta:


\func Star=* {A : \Type} {a : A} (alpha beta : Loop^2 {A} (a)) : alpha Star beta = alpha * beta
  => star (sub_path (alpha)) (sub_path( beta))

\func star {A : \Type} {a b c : A} {p q : a = b} {r s : b = c} (alpha : p = q) (beta : r = s) : p * r = q * s
  => (leftstar r alpha) * (rightstar q beta)

\func star' {A : \Type} {a b c : A} {p q : a = b} {r s : b = c} (alpha : p = q) (beta : r = s) : p * r = q * s
  => (rightstar p beta) * (leftstar s alpha)

\func \infix 4 Star' {A : \Type} {a : A} (alpha beta : Loop^2 {A} (a)) : Loop^2 {A} (a)
  => star' alpha beta

\func Star=* {A : \Type} {a : A} (alpha beta : Loop^2 {A} (a)) : alpha Star beta = alpha * beta
  => star (sub_path (alpha)) (sub_path( beta))

\func Star'=* {A : \Type} {a : A} (alpha beta : Loop^2 {A} (a)) : alpha Star' beta = beta * alpha
  => star (sub_path (beta)) (sub_path(alpha))

-- finally, I just have to show that star = star'

\func star {A : \Type} {a b c : A} {p q : a = b} {r s : b = c} (alpha : p = q) (beta : r = s) : p * r = q * s
  => (leftstar r alpha) * (rightstar q beta)

\func star=star' {A : \Type} {a b c : A} {p q : a = b} {r s : b = c} (alpha : p = q) (beta : r = s) : (star alpha beta) = (star' alpha beta)
  \elim p, r, alpha, beta
  | idp, idp, idp , idp => idp

\func sub_path {A : \Type} {a b : A} (p : a = b) : ((idp * p) * idp) = p
  \elim p | idp => idp

\func EckHil {A : \Type} {a : A} {alpha beta : Loop^2 {A} (a)} : alpha * beta = beta * alpha
  => (inv (Star=* alpha beta) * (star=star' alpha beta)) * (Star'=* alpha beta)

-- we will finish this chapter with some more definitions:

\func Pointed_type : \Type => \Sigma (A : \Type) A

-- an inhabitant of the pointed type is an type A together with a base point a : A


-- given a pointed type (A , a), we again define its loops space:

\func Loop_space : Pointed_type -> Pointed_type =>
  \lam x => (x.2 = x.2, idp)

-- inductively we can define the n-th loop space inductively:

\func n_Loop_space (n : Nat) (x : Pointed_type) : Pointed_type \elim n
  | 0 => x
  | suc n => Loop_space (n_Loop_space n x)
\import CH1.Def.def (xx)
\import CH2.Chpt.sec1
\import CH2.Chpt.sec2
\import CH2.Chpt.sec3
\import CH2.Chpt.sec4
\import CH2.Chpt.sec5
\import CH2.Chpt.sec6

{- Sigma Types
 -}

{- Let A be a type, before we consider nondependent Sigma type A xx B, now we are going to consider type family
 P : A -> \Type. We expect that given a path p : w = w' in \Sigma (x : A) P(x), then it is equal to the path
 downstairs pr_1(p) : pr1(w) = pr1(w'), and plus the adp_f : pr1(p)_*(pr2(w)) = pr2(w'). Before we see that given
 those data then it could recover p.
-}

\func pr_1 {A : \Type}{P : A -> \Type} (w : \Sigma (x : A) (P x)) : A => w.1

\func pr_2 {A : \Type}{P : A -> \Type} (w : \Sigma (x : A) (P x)) : P (w.1) => w.2

\func SigmaISO {A : \Type} {P : A -> \Type} (w w' : \Sigma (x : A) (P x)) :
(w = w') ISO (\Sigma (p : pr_1{A}{P} w = pr_1{A}{P} w') (alpha : transport P p (pr_2{A}{P} w) = pr_2{A}{P} w'))
  => (Sigma=func w w', Sigma=func_is_isequiv w w')

\func Sigma=func' {A : \Type} {P : A -> \Type} (w w' : \Sigma (x : A) (P x)) (p~ : w = w') :
   \Sigma (p : pr_1{A}{P} w = pr_1{A}{P} w') (alpha : transport P p (pr_2{A}{P} w) = pr_2{A}{P} w')
  \elim p~ | idp => (idp, idp)

\func Sigma=func {A : \Type} {P : A -> \Type} (w w' : \Sigma (x : A) (P x)) :
  (w = w') -> (\Sigma (p : pr_1{A}{P} w = pr_1{A}{P} w') (alpha : transport P p (pr_2{A}{P} w) = pr_2{A}{P} w'))
  => \lam p~ => Sigma=func' w w' p~

-- we want to show that Sigma=func is an equivalence, or an inhabitant of isequiv(Sigma=func'):

\func Sigma=func_is_qinv {A : \Type} {P : A -> \Type} (w w' : \Sigma (x : A) (P x)) :
 qinv (Sigma=func{A}{P} w w') => (Sigma=inv w w', Sigma=counit w w', Sigma=unit w w')

\func Sigma=func_is_isequiv {A : \Type} {P : A -> \Type} (w w' : \Sigma (x : A) (P x)) :
  isequiv (Sigma=func {A}{P} w w') =>
  qinv_to_isequiv{(w = w')}{(\Sigma (p : pr_1{A}{P} w = pr_1{A}{P} w') (alpha : transport P p (pr_2{A}{P} w) = pr_2{A}{P} w'))} (Sigma=func w w') (Sigma=func_is_qinv{A}{P} w w')
-- first we define the inverse function:

\func Sigma=inv' {A : \Type} {P : A -> \Type} (w w' : \Sigma (x : A) (P x)) (p : pr_1{A}{P} w = pr_1{A}{P} w')
  (alpha : transport P p (pr_2{A}{P} w) = pr_2{A}{P} w') : (w = w')
  \elim w , w' , p, alpha | (w_1, w_2) , (w'_1, w'_2) , idp, idp => idp

\func Sigma=inv {A : \Type} {P : A -> \Type} (w w' : \Sigma (x : A) (P x)) :
  \Sigma (p : pr_1{A}{P} w = pr_1{A}{P} w') (alpha : transport P p (pr_2{A}{P} w) = pr_2{A}{P} w') -> (w = w')
  => \lam X => Sigma=inv' {A}{P} w w' X.1 X.2

-- great, now we will have to show that f o g ~ id:

\func Sigma=counit {A : \Type} {P : A -> \Type} (w w' : \Sigma (x : A) (P x)) :
  ((Sigma=func{A}{P} w w') o  (Sigma=inv{A}{P} w w'))
  ~{\Sigma (p : pr_1{A}{P} w = pr_1{A}{P} w') (alpha : transport P p (pr_2{A}{P} w) = pr_2{A}{P} w')}
   {\lam X => \Sigma (p : pr_1{A}{P} w = pr_1{A}{P} w') (alpha : transport P p (pr_2{A}{P} w) = pr_2{A}{P} w')}
   id => \lam X => Sigma=conit' {A}{P} w w' X.1 X.2

\func Sigma=conit' {A : \Type} {P : A -> \Type} (w w' : \Sigma (x : A) (P x)) (p : pr_1{A}{P} w = pr_1{A}{P} w')
(alpha : transport P p (pr_2{A}{P} w) = pr_2{A}{P} w') : ((Sigma=func{A}{P} w w') o  (Sigma=inv{A}{P} w w')) (p , alpha) = (p , alpha)
   \elim w , w', p, alpha | (w_1, w_2) , (w'_1, w'_2) , idp, idp => idp

\func Sigma=unit {A : \Type} {P : A -> \Type} (w w' : \Sigma (x : A) (P x)) :
  (Sigma=inv{A}{P} w w') o (Sigma=func{A}{P} w w') ~{w = w'} {\lam p~ => w = w'} id => \lam p~ => Sigma=unit'{A}{P} w w' p~

\func Sigma=unit' {A : \Type} {P : A -> \Type} (w w' : \Sigma (x : A) (P x)) ( p~ : w = w') :
  ((Sigma=inv{A}{P} w w') o (Sigma=func{A}{P} w w')) p~ = p~ \elim w , p~ | (w_1, w_2), idp => idp

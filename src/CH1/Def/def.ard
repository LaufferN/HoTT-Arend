-- we use a little o for composition

\func \infixl 6 o {A B C : \Type}
                  (g : B -> C) (f : A -> B) : A -> C => \lam (x : A) => g(f x)

-- for those who prefer the diagrammatic order

\func \infixl 6 u {A B C : \Type}
                  (f : A -> B) (g : B -> C) : A -> C => g o f

\func id {A : \Type} (a : A) : A => a

-- definitions for the simple product type

\func \infix 6 xx (A B : \Type) : \Type => \Sigma A B

-- Redundant clauses are included to show that only by computation do we understand the redundancy

\func recAxxB {A B : \Type}
              (C : \Type) (g : A -> B -> C) (z : A xx B) : C \elim z
  | (a,b) => g(a)(b)
  | _ => {?}

-- This definition of the inductor is more correct as it reflects the actual computation rule
-- If you view the proof for uniqueness then in context the cononical projections start to make sense

\func indAxxB {A B : \Type}
              (C : A xx B -> \Type) (g : \Pi (x : A) (y : B) -> C(x,y)) (z : A xx B) : C(z) \elim z
  | (a,b) => g(a)(b)
  |  _ => {?}

\func pr1 {A B : \Type}
          (z : A xx B) : A => recAxxB(A)(\lam a b => a)(z)

\func pr2 {A B : \Type}
          (z : A xx B) : B => recAxxB(B)(\lam a b => b)(z)

-- inline for the dependent pair type

\func \infix 6 && (A : \Type) (B : A -> \Type) : \Type => \Sigma (x : A) (b : B(x))

\func indA&&B {A : \Type} {B : A -> \Type}
              (C : A && B -> \Type) (g : \Pi(x : A) (y : B(x)) -> C(x,y)) (z : A && B) : C(z) \elim z
  | (a,b) => g(a)(b)
  | _ => {?}

\func recA&&B {A : \Type} {B : A -> \Type}
              (C : \Type) (g : \Pi(x : A) (y : B(x)) -> C) (z : A && B) : C \elim z
  | (a,b) => g(a)(b)
  | _ => {?}

\func pr1&& {A : \Type} {B : A -> \Type}
            (x : A && B) : A => recA&&B{A}{B} A (\lam a b => a)(x)

\func pr2&& {A : \Type} {B : A -> \Type}
            (x : A && B) : B(pr1&&{A}{B} x) => indA&&B{A}{B} (\lam y => B(pr1&&{A}{B} y)) (\lam a b => b)(x)

-- basic types

\data Zero

-- Exists since functions from zero just trivially do

\func recZero (C : \Type) (z : Zero) : C \elim z
  | _ => {?}

-- Exists since functions from zero just trivially do

\func indZero (C : Zero -> \Type) (z : Zero) : C z \elim z
  | _ => {?}

\data One | star

\func recOne (C : \Type) (c : C) (z : One) : C \elim z
  | star => c
  | _ => {?}

\func indOne (C : One -> \Type) (c : C star) (x : One) : C x \elim x
  | One.star => c
  | _ => {?}

\data Two | zero | one

\func recTwo (C : \Type) (c0 : C) (c1 : C) (x : Two) : C \elim x
  | zero => c0
  | one => c1
  | _ => {?}

\func indTwo (C : Two -> \Type) (c0 : C zero) (c1 : C one) (x : Two) : C x \elim x
  | zero => c0
  | one => c1
  | _ => {?}

-- Coproduct Type

\data coproduct (A B : \Type)
  | inl A
  | inr B

\func \infix 5 ++ (A B : \Type) : \Type => coproduct A B

\func recA++B {A B : \Type}
              (C : \Type) (g0 : A -> C) (g1 : B -> C) (x : A ++ B) : C \elim x
  | inl a => g0 a
  | inr b => g1 b
  | _ => {?}

\func indA++B {A B : \Type}
              (C : A ++ B -> \Type) (g0 : \Pi(a : A) -> C(inl a)) (g1 : \Pi(b : B) -> C(inr b)) (x : A ++ B) : C x \elim x
  | inl a => g0 a
  | inr b => g1 b
  | _ => {?}

-- standard refl function

-- \func refl (A : \Type) (a : A) : a = a => path(\lam _ => a)

-- idp is the version that works for pattern matching but is defined in the same way

\func indPath {A : \Type} (C : \Pi (x y : A) -> (x = y) -> \Type) (c : \Pi(x : A) -> C x x idp) (x y : A) (p : x = y) : C x y p
\elim y, p
  | x, idp => c(x)
  | _, _ => {?}

-- we will use Arend's build int Natural type defined as
{-
\data Nat
  | zero
  | suc Nat
-}

\data Fin (n : Nat) \with
  | suc n => { fzero | fsuc (Fin n) }

-- Negation of a type

\func Not (A : \Type) : \Type => A -> Zero

-- This is a naive notion of an isomorphism

\func \infix 9 ISO (A B : \Type) : \Type =>
  \Sigma (f : A -> B) (g : B -> A) (\Pi (x : A) -> (g o f) x = x) (\Pi (x : B) -> (f o g) x = x)

\func sameFunc {A B : \Type}
               (f : A -> B) (g : A -> B) : \Type => \Pi (a : A) -> f(a) = g(a)

\func Magma : \Type => \Sigma (A : \Type) (A -> A -> A)

\func PointedMagma : \Type => \Sigma (A : \Type) (A -> A -> A) A

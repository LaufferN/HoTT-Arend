\import CH1.Chpt.sec07

\func Neg (A : \Type) : \Type => A -> Zero

\import CH1.Chpt.sec05

\func deMorganLaws {A B : \Type} (f : Neg A) (g : Neg B) : Neg (A || B) => recA||B Zero f g

\func anotherTaut {A : \Type} {P Q : A -> \Type} (x : \Pi (a : A) -> P a xx Q a) :
  (\Pi (a : A) -> P a) xx (\Pi (a : A) -> Q a) => (\lam a => pr0_xx (x a), \lam a => pr1_xx (x a))

\import CH1.Chpt.sec09

\func leq (n m : Nat) : \Type => \Sigma (k : Nat) (add n k = m)

\func < (n m : Nat) : \Type => \Sigma (k : Nat) (add n (Nat.succ k) = m)

\func SemiGroup : \Type => \Sigma (A : \Type) (m : A -> A -> A) (\Pi (x y z : A) -> m x (m y z) = m (m x y) z)

-- Defining these as functions clearly works but it would be better to define SemiGroup as a class

\class Magma
  | A : \Type
  | \infixl 7 * : A -> A -> A

\class PointedMagma \extends Magma
  | star : A

\class Semigroup \extends Magma
  | *-assoc (x y z : A) : x * (y * z)  = (x * y) * z

-- Classes allow objects within this to be explicitly coerced to the first field